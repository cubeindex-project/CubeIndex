name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Paris
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Prepare dummy environment
        if: ${{ github.event_name == 'pull_request' }}
        id: dummy_env
        shell: bash
        run: |
          set -euo pipefail
          tmp_env="$RUNNER_TEMP/ci-env"
          : >"$tmp_env"
          while IFS= read -r line || [[ -n "$line" ]]; do
            if [[ -z "$line" || "$line" == \#* ]]; then
              continue
            fi
            key="${line%%=*}"
            value="${line#*=}"
            if [[ "$key" == "$line" ]]; then
              continue
            fi
            if [[ -z "$value" ]]; then
              sanitized=$(echo "$key" | tr '[:upper:]' '[:lower:]' | tr -c '[:alnum:]' '-')
              value="dummy-$sanitized"
            fi
            printf '%s=%s\n' "$key" "$value" >>"$tmp_env"
          done < .env.example
          echo "file=$tmp_env" >> "$GITHUB_OUTPUT"

      - name: Build
        shell: bash
        env:
          DUMMY_ENV_FILE: ${{ steps.dummy_env.outputs.file }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          set -euo pipefail
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" && -n "$DUMMY_ENV_FILE" ]]; then
            set -a
            source "$DUMMY_ENV_FILE"
            set +a
          fi
          npm run build

  release:
    needs: build
    if: >-
      ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:') }}
    runs-on: ubuntu-latest
    env:
      COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      COMMIT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract release metadata
        id: release_meta
        shell: bash
        run: |
          set -euo pipefail
          message="$COMMIT_MESSAGE"
          if [[ -z "$message" ]]; then
            echo "Commit message is required" >&2
            exit 1
          fi
          first_line=$(printf '%s\n' "$message" | head -n1)
          tag_name=${first_line#release:}
          tag_name=$(printf '%s' "$tag_name" | sed -e 's/^ *//' -e 's/ *$//')
          if [[ -z "$tag_name" ]]; then
            echo "Unable to determine tag from commit message" >&2
            exit 1
          fi
          release_body=$(printf '%s\n' "$message" | sed '1d')
          release_body=$(printf '%s\n' "$release_body" | sed '/./,$!d')
          if [[ -z "$release_body" ]]; then
            release_body="Release triggered by commit $COMMIT_SHA."
          fi
          echo "tag=$tag_name" >> "$GITHUB_OUTPUT"
          printf 'body<<EOF\n%s\nEOF\n' "$release_body" >> "$GITHUB_OUTPUT"

      - name: Create tag
        run: |
          git tag "${{ steps.release_meta.outputs.tag }}"
          git push origin "${{ steps.release_meta.outputs.tag }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_meta.outputs.tag }}
          name: ${{ steps.release_meta.outputs.tag }}
          body: ${{ steps.release_meta.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
